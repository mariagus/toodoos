{"version":3,"sources":["APIHelper.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","todoItem","a","axios","post","newTodo","data","id","delete","message","payload","console","log","put","get","todos","addTodoHandler","handleDelete","handleToggle","getAllTodos","App","useState","todoText","setTodoText","setTodos","useEffect","APIHelper","fetchTodoAndSetTodos","e","preventDefault","stopPropagation","_id","find","todo","completed","updatedTodo","updated","map","filter","i","className","style","color","type","value","onChange","event","target","onClick","key","textDecoration","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.69130de5.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"https://too-doos.herokuapp.com/todos/\";\n\nasync function addTodoHandler(todoItem) {\n  const { data: newTodo } = await axios.post(`${API_URL}/add`, {\n    todoItem,\n  });\n  return newTodo;\n}\nasync function handleDelete(id) {\n  const message = await axios.delete(`${API_URL}${id}`);\n  return message;\n}\nasync function handleToggle(id, payload) {\n  console.log({ id, payload });\n  const { data: newTodo } = await axios.put(`${API_URL}${id}`, payload);\n  console.log({ newTodo });\n  return newTodo;\n}\n\nasync function getAllTodos() {\n  const { data: todos } = await axios.get(API_URL);\n  return todos;\n}\n\nexport default { addTodoHandler, handleDelete, handleToggle, getAllTodos };\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport APIHelper from \"./APIHelper.js\";\n\nfunction App() {\n  const [todoText, setTodoText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const fetchTodoAndSetTodos = async () => {\n      const todos = await APIHelper.getAllTodos();\n      setTodos(todos);\n    };\n    fetchTodoAndSetTodos();\n  }, []);\n\n  const addTodoHandler = async (e) => {\n    e.preventDefault();\n\n    const newTodo = await APIHelper.addTodoHandler(todoText);\n    setTodos([...todos, newTodo]);\n    setTodoText(\"\");\n  };\n\n  const handleToggle = async (e, id) => {\n    e.stopPropagation();\n    const payload = {\n      _id: todos.find((todo) => todo._id === id).id,\n      todoItem: todos.find((todo) => todo._id === id).todoItem,\n      completed: !todos.find((todo) => todo._id === id).completed,\n    };\n    const updatedTodo = await APIHelper.handleToggle(id, payload);\n    let updated = todos.map((todo) => (todo._id === id ? updatedTodo : todo));\n\n    setTodos(updated);\n  };\n\n  const handleDelete = async (e, id) => {\n    e.stopPropagation();\n    await APIHelper.handleDelete(id);\n    setTodos(todos.filter(({ _id: i }) => id !== i));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header fade-in\">\n        <h1>\n          T<div style={{ color: \"#a8a8a8\" }}>oo</div>D\n          <div style={{ color: \"#a8a8a8\" }}>oo</div>S\n        </h1>\n        <div className=\"createTodo\">\n          <input\n            type=\"text\"\n            value={todoText}\n            className=\"inputTodo\"\n            id=\"inputTodo\"\n            onChange={(event) => {\n              setTodoText(event.target.value);\n            }}\n          />\n          <button type=\"button\" className=\"addButton\" onClick={addTodoHandler}>\n            +\n          </button>\n        </div>\n      </header>\n      <ul className=\"todoList\">\n        {todos.map((todo, i) => (\n          <li key={i}>\n            <p\n              className=\"listItems\"\n              onClick={(e) => handleToggle(e, todo._id)}\n              style={\n                todo.completed\n                  ? { textDecoration: \"line-through\", color: \"#d9d9d9\" }\n                  : { textDecoration: \"none\" }\n              }\n            >\n              {todo.todoItem}\n            </p>\n            <button\n              className=\"deleteTodo\"\n              onClick={(e) => handleDelete(e, todo._id)}\n            >\n              -\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}